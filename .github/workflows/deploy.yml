name: Deploy to AWS EC2

on:
  push:
    branches:
      - main    # Trigger the workflow on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest    # Use the latest Ubuntu runner in GitHub Actions

    steps:
      # ----------------------------------------
      # 1. Checkout the repository
      # ----------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------------------------------------
      # 2. Set up Java Development Kit (JDK) 21
      # ----------------------------------------
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'            # Specify Java version
          distribution: 'temurin'       # Use Temurin distribution (recommended)

      # ----------------------------------------
      # 3. Build the Spring Boot application using Maven
      # ----------------------------------------
      - name: Build with Maven
        run: mvn clean package -DskipTests    # Clean and package the application without running tests

      # ----------------------------------------
      # 4. Check AWS CLI version
      #    (needed for aws s3 cp commands)
      # ----------------------------------------

      - name: Check AWS CLI version
        run: aws --version

      # ----------------------------------------
      # 5. Configure AWS credentials for the runner
      #    (provides environment variables for AWS CLI)
      # ----------------------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1           # Change to your AWS region

      # ----------------------------------------
      # 6. Upload the built JAR file to S3 bucket
      # ----------------------------------------
      - name: Upload JAR to S3
        run: |
          aws s3 cp target/user-service-0.0.1-SNAPSHOT.jar s3://my-camping-bucket/user-service-0.0.1-SNAPSHOT.jar

      # ----------------------------------------
      # 7. Create the private key file for SSH
      #    (the key should be stored in a GitHub secret)
      # ----------------------------------------
      - name: Create SSH key file
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem    # Restrict permissions for security

      # ----------------------------------------
      # 8. SSH into the EC2 instance and deploy the app:
      #    - download the JAR from S3
      #    - stop any running app process
      #    - Check if app.pid exists
      #    - start the new app version in background
      # ----------------------------------------
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.231.23.72 '
            set -x
            aws s3 cp s3://my-camping-bucket/user-service-0.0.1-SNAPSHOT.jar /home/ec2-user/user-service-0.0.1-SNAPSHOT.jar

            PIDS=$(pgrep -f user-service-0.0.1-SNAPSHOT.jar) || true
            
            if [ ! -z "$PIDS" ]; then
            echo "Java server is running. Shutting it down..."
            kill $PIDS || true
            else
            echo "Java server is not running."
            fi
          
            nohup java -jar /home/ec2-user/user-service-0.0.1-SNAPSHOT.jar > /home/ec2-user/output.log 2>&1 &
          '

      # ----------------------------------------
      # 9. Check application log
      # ----------------------------------------
      - name: Check application log
        run: tail -f /home/ec2-user/output.log

      # ----------------------------------------
      # 9. Delete the SSH key file after deployment
      #    (important for security)
      # ----------------------------------------
      - name: Clean up SSH key
        run: rm -f key.pem